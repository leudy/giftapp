{"version":3,"sources":["serviceWorker.js","components/AddCategory.js","components/Gifts/GiftItem.js","helpers/giftrepo.js","components/Gifts/GiftsGrid.js","hooks/useFectGift.js","components/GifApp.js","index.js"],"names":["Boolean","window","location","hostname","match","AddCategory","setCategory","useState","Input","setInput","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","GiftItem","title","url","className","src","alt","GetDataFromApi","criteria","a","console","log","uri","encodeURI","fetch","resp","json","data","gifts","map","img","id","images","original","GiftsGrid","useEffect","then","setstate","loading","state","useFectGift","item","key","GifApp","category","setcategory","style","textAlign","fontSize","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCiBSC,EAjCK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACbC,mBAAS,IADI,mBAChCC,EADgC,KACzBC,EADyB,KAoBvC,OACE,6BACE,0BAAMC,SAXY,SAACC,GACrBA,EAAEC,iBAEEJ,EAAMK,OAAOC,OAAS,IACxBR,EAAYE,GACZC,EAAS,OAOP,2BAAOM,KAAK,OAAOC,MAAOR,EAAOS,SAlBlB,SAACN,GACpBF,EAASE,EAAEO,OAAOF,aCNTG,EAAW,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEhC,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,uBAAGE,UAAU,UAAUF,K,uBCPhBK,EAAc,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAC5BC,QAAQC,IAAI,cAAeH,GAC3BE,QAAQC,IAAIH,GACG,mCACTI,EAJsB,iDAI0BC,UACpDL,GAL0B,6BAGb,mCAHa,KAO5BE,QAAQC,IAAIC,GAPgB,SAQTE,MAAMF,GARG,cAQtBG,EARsB,iBASLA,EAAKC,OATA,wBASpBC,EAToB,EASpBA,KACRP,QAAQC,IAAIM,GACRC,EAAQD,EAAKE,KAAI,SAACC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRlB,IAAKiB,EAAIE,OAAOC,SAASpB,IACzBD,MAAOkB,EAAIlB,UAfa,kBAmBrBgB,GAnBqB,4CAAH,sDCIdM,EAAY,SAAC,GAAkB,IAAhBhB,EAAe,EAAfA,SAC1BE,QAAQC,IAAIH,GAD6B,MCDhB,SAACA,GAC1BE,QAAQC,IAAIH,GAKZiB,qBAAU,WACRlB,EAAeC,GAAUkB,MAAK,SAACX,GAC7BY,EAAS,CAAEV,KAAMF,EAAMa,SAAS,SAEjC,CAACpB,IAVmC,MAYbnB,mBAVN,CAClB4B,KAAM,GACNW,SAAS,IAJ4B,mBAYhCC,EAZgC,KAYzBF,EAZyB,KAcvC,OAAOE,EDXmBC,CAAYtB,GAA9BS,EAFiC,EAEjCA,KAAMW,EAF2B,EAE3BA,QACd,OACE,yBAAKxB,UAAU,aACb,4BAAKI,GACL,2BAAIoB,GAAW,wCACf,yBAAKxB,UAAU,aACZa,GAAQA,EAAKE,KAAI,SAACY,GAAD,OAAU,kBAAC,EAAD,iBAAcA,EAAd,CAAoBC,IAAKD,EAAKV,SAD5D,OEROY,EAAS,WAAO,IAAD,EACM5C,mBAAS,QADf,mBACnB6C,EADmB,KACTC,EADS,KAG1B,OACE,6BACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,SAAU,SAC3C,wCAEF,4DACA,6BACA,kBAAC,EAAD,CAAalD,YAAa+C,IAC1B,kBAAC,EAAD,CAAW3B,SAAU0B,MCR3BK,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SP6H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.0d08e8b1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst AddCategory = ({ setCategory }) => {\r\n  const [Input, setInput] = useState(\"\");\r\n  //==================================================\r\n  //   for visualize\r\n  //==================================================\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n  //==================================================\r\n  //   menajando el formulario\r\n  //==================================================\r\n  const handlerSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (Input.trim().length > 2) {\r\n      setCategory(Input);\r\n      setInput(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handlerSubmit}>\r\n        <input type=\"text\" value={Input} onChange={handleChange} />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategory: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from \"react\";\r\n\r\nexport const GiftItem = ({ title, url }) => {\r\n  //{id,url,title}\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title} />\r\n      <p className=\"card-p\">{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","export const GetDataFromApi = async (criteria) => {\r\n  console.log(\"from helper\", criteria);\r\n  console.log(criteria);\r\n  const apiKey = \"AzcFdNTOvh1NSCiGtH3RY1yngK4KNFLV\";\r\n  const uri = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    criteria\r\n  )}&limit=10&api_key=${apiKey}&`;\r\n  console.log(uri);\r\n  const resp = await fetch(uri);\r\n  const { data } = await resp.json();\r\n  console.log(data);\r\n  var gifts = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      url: img.images.original.url,\r\n      title: img.title,\r\n    };\r\n  });\r\n\r\n  return gifts;\r\n};\r\n","import React from \"react\";\r\nimport { GiftItem } from \"./GiftItem\";\r\nimport { useFectGift } from \"../../hooks/useFectGift\";\r\n\r\nexport const GiftsGrid = ({ criteria }) => {\r\n  console.log(criteria);\r\n  const { data, loading } = useFectGift(criteria);\r\n  return (\r\n    <div className=\"card-grid\">\r\n      <h3>{criteria}</h3>\r\n      <p>{loading && <p>Loading </p>}</p>\r\n      <div className=\"card-grid\">\r\n        {data && data.map((item) => <GiftItem {...item} key={item.id} />)};\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { GetDataFromApi } from \"../helpers/giftrepo\";\r\n\r\nexport const useFectGift = (criteria) => {\r\n  console.log(criteria);\r\n  const intialstate = {\r\n    data: [],\r\n    loading: true,\r\n  };\r\n  useEffect(() => {\r\n    GetDataFromApi(criteria).then((resp) => {\r\n      setstate({ data: resp, loading: false });\r\n    });\r\n  }, [criteria]);\r\n\r\n  const [state, setstate] = useState(intialstate);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./AddCategory\";\r\nimport { GiftsGrid } from \"./Gifts/GiftsGrid\";\r\nexport const GifApp = () => {\r\n  const [category, setcategory] = useState(\"Goku\");\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ textAlign: \"center\", fontSize: \"3rem\" }}>\r\n        <h2>GiftApp</h2>\r\n      </div>\r\n      <p>Developed by Leudi Rosario C.</p>\r\n      <hr />\r\n      <AddCategory setCategory={setcategory}></AddCategory>\r\n      <GiftsGrid criteria={category}></GiftsGrid>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { GifApp } from \"./components/GifApp\";\n\nReactDOM.render(<GifApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}